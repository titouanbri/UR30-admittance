# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ur_msgs/SetForceModeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class SetForceModeRequest(genpy.Message):
  _md5sum = "04cfdc672416a6eb3ccbbcc81eeaa8a5"
  _type = "ur_msgs/SetForceModeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# A 6d pose vector that defines the force frame relative to the base frame
geometry_msgs/PoseStamped task_frame        

# A 6d vector of 0s and 1s. 1 means that the robot will be compliant in the corresponding axis of the task frame
bool selection_vector_x
bool selection_vector_y
bool selection_vector_z
bool selection_vector_rx
bool selection_vector_ry
bool selection_vector_rz  

# The forces/torques the robot will apply to its environment. For geometric interpretation, please
# see parameter `type`
geometry_msgs/Wrench wrench

# An integer [1;3] specifying how the robot interprets the force frame
# 1: The force frame is transformed in a way such that its y-axis is aligned with a vector pointing
#    from the robot tcp towards the origin of the force frame.
# 2: The force frame is not transformed.
# 3: The force frame is transformed in a way such that its x-axis is the projection of the robot tcp
#     velocity vector onto the x-y plane of the force frame.
uint8 type
# Type constants:
uint8 TCP_TO_ORIGIN=1
uint8 NO_TRANSFORM=2
uint8 TCP_VELOCITY_TO_X_Y=3

# Maximum allowed tcp speed (relative to the task frame).
# PLEASE NOTE: This is only relevant for axes marked as compliant in the selection_vector
geometry_msgs/Twist speed_limits

# For non-compliant axes, these values are the maximum allowed deviation along/about an axis
# between the actual tcp position and the one set by the program.
float32[6] deviation_limits

# Force mode damping factor. Sets the damping parameter in force mode. In range [0;1], default value is 0.025
# A value of 1 is full damping, so the robot will decelerate quickly if no force is present. A value of 0
# is no damping, here the robot will maintain the speed.
float32 damping_factor

# Force mode gain scaling factor. Scales the gain in force mode. scaling parameter is in range [0;2], default is 0.5. 
# A value larger than 1 can make force mode unstable, e.g. in case of collisions or pushing against hard surfaces.
float32 gain_scaling

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3 linear
Vector3 angular
"""
  # Pseudo-constants
  TCP_TO_ORIGIN = 1
  NO_TRANSFORM = 2
  TCP_VELOCITY_TO_X_Y = 3

  __slots__ = ['task_frame','selection_vector_x','selection_vector_y','selection_vector_z','selection_vector_rx','selection_vector_ry','selection_vector_rz','wrench','type','speed_limits','deviation_limits','damping_factor','gain_scaling']
  _slot_types = ['geometry_msgs/PoseStamped','bool','bool','bool','bool','bool','bool','geometry_msgs/Wrench','uint8','geometry_msgs/Twist','float32[6]','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_frame,selection_vector_x,selection_vector_y,selection_vector_z,selection_vector_rx,selection_vector_ry,selection_vector_rz,wrench,type,speed_limits,deviation_limits,damping_factor,gain_scaling

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetForceModeRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.task_frame is None:
        self.task_frame = geometry_msgs.msg.PoseStamped()
      if self.selection_vector_x is None:
        self.selection_vector_x = False
      if self.selection_vector_y is None:
        self.selection_vector_y = False
      if self.selection_vector_z is None:
        self.selection_vector_z = False
      if self.selection_vector_rx is None:
        self.selection_vector_rx = False
      if self.selection_vector_ry is None:
        self.selection_vector_ry = False
      if self.selection_vector_rz is None:
        self.selection_vector_rz = False
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.Wrench()
      if self.type is None:
        self.type = 0
      if self.speed_limits is None:
        self.speed_limits = geometry_msgs.msg.Twist()
      if self.deviation_limits is None:
        self.deviation_limits = [0.] * 6
      if self.damping_factor is None:
        self.damping_factor = 0.
      if self.gain_scaling is None:
        self.gain_scaling = 0.
    else:
      self.task_frame = geometry_msgs.msg.PoseStamped()
      self.selection_vector_x = False
      self.selection_vector_y = False
      self.selection_vector_z = False
      self.selection_vector_rx = False
      self.selection_vector_ry = False
      self.selection_vector_rz = False
      self.wrench = geometry_msgs.msg.Wrench()
      self.type = 0
      self.speed_limits = geometry_msgs.msg.Twist()
      self.deviation_limits = [0.] * 6
      self.damping_factor = 0.
      self.gain_scaling = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.task_frame.header.seq, _x.task_frame.header.stamp.secs, _x.task_frame.header.stamp.nsecs))
      _x = self.task_frame.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d6B6dB6d().pack(_x.task_frame.pose.position.x, _x.task_frame.pose.position.y, _x.task_frame.pose.position.z, _x.task_frame.pose.orientation.x, _x.task_frame.pose.orientation.y, _x.task_frame.pose.orientation.z, _x.task_frame.pose.orientation.w, _x.selection_vector_x, _x.selection_vector_y, _x.selection_vector_z, _x.selection_vector_rx, _x.selection_vector_ry, _x.selection_vector_rz, _x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.type, _x.speed_limits.linear.x, _x.speed_limits.linear.y, _x.speed_limits.linear.z, _x.speed_limits.angular.x, _x.speed_limits.angular.y, _x.speed_limits.angular.z))
      buff.write(_get_struct_6f().pack(*self.deviation_limits))
      _x = self
      buff.write(_get_struct_2f().pack(_x.damping_factor, _x.gain_scaling))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.task_frame is None:
        self.task_frame = geometry_msgs.msg.PoseStamped()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.Wrench()
      if self.speed_limits is None:
        self.speed_limits = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.task_frame.header.seq, _x.task_frame.header.stamp.secs, _x.task_frame.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_frame.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_frame.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 159
      (_x.task_frame.pose.position.x, _x.task_frame.pose.position.y, _x.task_frame.pose.position.z, _x.task_frame.pose.orientation.x, _x.task_frame.pose.orientation.y, _x.task_frame.pose.orientation.z, _x.task_frame.pose.orientation.w, _x.selection_vector_x, _x.selection_vector_y, _x.selection_vector_z, _x.selection_vector_rx, _x.selection_vector_ry, _x.selection_vector_rz, _x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.type, _x.speed_limits.linear.x, _x.speed_limits.linear.y, _x.speed_limits.linear.z, _x.speed_limits.angular.x, _x.speed_limits.angular.y, _x.speed_limits.angular.z,) = _get_struct_7d6B6dB6d().unpack(str[start:end])
      self.selection_vector_x = bool(self.selection_vector_x)
      self.selection_vector_y = bool(self.selection_vector_y)
      self.selection_vector_z = bool(self.selection_vector_z)
      self.selection_vector_rx = bool(self.selection_vector_rx)
      self.selection_vector_ry = bool(self.selection_vector_ry)
      self.selection_vector_rz = bool(self.selection_vector_rz)
      start = end
      end += 24
      self.deviation_limits = _get_struct_6f().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.damping_factor, _x.gain_scaling,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.task_frame.header.seq, _x.task_frame.header.stamp.secs, _x.task_frame.header.stamp.nsecs))
      _x = self.task_frame.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d6B6dB6d().pack(_x.task_frame.pose.position.x, _x.task_frame.pose.position.y, _x.task_frame.pose.position.z, _x.task_frame.pose.orientation.x, _x.task_frame.pose.orientation.y, _x.task_frame.pose.orientation.z, _x.task_frame.pose.orientation.w, _x.selection_vector_x, _x.selection_vector_y, _x.selection_vector_z, _x.selection_vector_rx, _x.selection_vector_ry, _x.selection_vector_rz, _x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.type, _x.speed_limits.linear.x, _x.speed_limits.linear.y, _x.speed_limits.linear.z, _x.speed_limits.angular.x, _x.speed_limits.angular.y, _x.speed_limits.angular.z))
      buff.write(self.deviation_limits.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.damping_factor, _x.gain_scaling))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.task_frame is None:
        self.task_frame = geometry_msgs.msg.PoseStamped()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.Wrench()
      if self.speed_limits is None:
        self.speed_limits = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.task_frame.header.seq, _x.task_frame.header.stamp.secs, _x.task_frame.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.task_frame.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.task_frame.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 159
      (_x.task_frame.pose.position.x, _x.task_frame.pose.position.y, _x.task_frame.pose.position.z, _x.task_frame.pose.orientation.x, _x.task_frame.pose.orientation.y, _x.task_frame.pose.orientation.z, _x.task_frame.pose.orientation.w, _x.selection_vector_x, _x.selection_vector_y, _x.selection_vector_z, _x.selection_vector_rx, _x.selection_vector_ry, _x.selection_vector_rz, _x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.type, _x.speed_limits.linear.x, _x.speed_limits.linear.y, _x.speed_limits.linear.z, _x.speed_limits.angular.x, _x.speed_limits.angular.y, _x.speed_limits.angular.z,) = _get_struct_7d6B6dB6d().unpack(str[start:end])
      self.selection_vector_x = bool(self.selection_vector_x)
      self.selection_vector_y = bool(self.selection_vector_y)
      self.selection_vector_z = bool(self.selection_vector_z)
      self.selection_vector_rx = bool(self.selection_vector_rx)
      self.selection_vector_ry = bool(self.selection_vector_ry)
      self.selection_vector_rz = bool(self.selection_vector_rz)
      start = end
      end += 24
      self.deviation_limits = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      _x = self
      start = end
      end += 8
      (_x.damping_factor, _x.gain_scaling,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_7d6B6dB6d = None
def _get_struct_7d6B6dB6d():
    global _struct_7d6B6dB6d
    if _struct_7d6B6dB6d is None:
        _struct_7d6B6dB6d = struct.Struct("<7d6B6dB6d")
    return _struct_7d6B6dB6d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ur_msgs/SetForceModeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetForceModeResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "ur_msgs/SetForceModeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetForceModeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetForceMode(object):
  _type          = 'ur_msgs/SetForceMode'
  _md5sum = 'ad1bcbfccfedd053ec6bb7eb365913d8'
  _request_class  = SetForceModeRequest
  _response_class = SetForceModeResponse
