# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rokubimini_msgs/Reading.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class Reading(genpy.Message):
  _md5sum = "f632d7286fac45ac13e8083c2bf7f237"
  _type = "rokubimini_msgs/Reading"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Reading

# Message header.
Header header
# Statusword.
uint32 statusword
sensor_msgs/Imu imu
geometry_msgs/WrenchStamped wrench
sensor_msgs/Imu externalImu
bool isForceTorqueSaturated
sensor_msgs/Temperature temperature


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/WrenchStamped
# A wrench with reference coordinate frame and timestamp
Header header
Wrench wrench

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: sensor_msgs/Temperature
# Single temperature reading.

Header header           # timestamp is the time the temperature was measured
                         # frame_id is the location of the temperature reading

float64 temperature     # Measurement of the Temperature in Degrees Celsius

float64 variance        # 0 is interpreted as variance unknown
"""
  __slots__ = ['header','statusword','imu','wrench','externalImu','isForceTorqueSaturated','temperature']
  _slot_types = ['std_msgs/Header','uint32','sensor_msgs/Imu','geometry_msgs/WrenchStamped','sensor_msgs/Imu','bool','sensor_msgs/Temperature']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,statusword,imu,wrench,externalImu,isForceTorqueSaturated,temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Reading, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.statusword is None:
        self.statusword = 0
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.WrenchStamped()
      if self.externalImu is None:
        self.externalImu = sensor_msgs.msg.Imu()
      if self.isForceTorqueSaturated is None:
        self.isForceTorqueSaturated = False
      if self.temperature is None:
        self.temperature = sensor_msgs.msg.Temperature()
    else:
      self.header = std_msgs.msg.Header()
      self.statusword = 0
      self.imu = sensor_msgs.msg.Imu()
      self.wrench = geometry_msgs.msg.WrenchStamped()
      self.externalImu = sensor_msgs.msg.Imu()
      self.isForceTorqueSaturated = False
      self.temperature = sensor_msgs.msg.Temperature()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4I().pack(_x.statusword, _x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs))
      _x = self.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w))
      buff.write(_get_struct_9d().pack(*self.imu.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.imu.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.imu.linear_acceleration_covariance))
      _x = self
      buff.write(_get_struct_3I().pack(_x.wrench.header.seq, _x.wrench.header.stamp.secs, _x.wrench.header.stamp.nsecs))
      _x = self.wrench.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d3I().pack(_x.wrench.wrench.force.x, _x.wrench.wrench.force.y, _x.wrench.wrench.force.z, _x.wrench.wrench.torque.x, _x.wrench.wrench.torque.y, _x.wrench.wrench.torque.z, _x.externalImu.header.seq, _x.externalImu.header.stamp.secs, _x.externalImu.header.stamp.nsecs))
      _x = self.externalImu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.externalImu.orientation.x, _x.externalImu.orientation.y, _x.externalImu.orientation.z, _x.externalImu.orientation.w))
      buff.write(_get_struct_9d().pack(*self.externalImu.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.externalImu.angular_velocity.x, _x.externalImu.angular_velocity.y, _x.externalImu.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.externalImu.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.externalImu.linear_acceleration.x, _x.externalImu.linear_acceleration.y, _x.externalImu.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.externalImu.linear_acceleration_covariance))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.isForceTorqueSaturated, _x.temperature.header.seq, _x.temperature.header.stamp.secs, _x.temperature.header.stamp.nsecs))
      _x = self.temperature.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.temperature.temperature, _x.temperature.variance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.WrenchStamped()
      if self.externalImu is None:
        self.externalImu = sensor_msgs.msg.Imu()
      if self.temperature is None:
        self.temperature = sensor_msgs.msg.Temperature()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.statusword, _x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs,) = _get_struct_4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.wrench.header.seq, _x.wrench.header.stamp.secs, _x.wrench.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wrench.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.wrench.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.wrench.wrench.force.x, _x.wrench.wrench.force.y, _x.wrench.wrench.force.z, _x.wrench.wrench.torque.x, _x.wrench.wrench.torque.y, _x.wrench.wrench.torque.z, _x.externalImu.header.seq, _x.externalImu.header.stamp.secs, _x.externalImu.header.stamp.nsecs,) = _get_struct_6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.externalImu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.externalImu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.externalImu.orientation.x, _x.externalImu.orientation.y, _x.externalImu.orientation.z, _x.externalImu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.externalImu.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.externalImu.angular_velocity.x, _x.externalImu.angular_velocity.y, _x.externalImu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.externalImu.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.externalImu.linear_acceleration.x, _x.externalImu.linear_acceleration.y, _x.externalImu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.externalImu.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 13
      (_x.isForceTorqueSaturated, _x.temperature.header.seq, _x.temperature.header.stamp.secs, _x.temperature.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.isForceTorqueSaturated = bool(self.isForceTorqueSaturated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.temperature.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.temperature.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.temperature.temperature, _x.temperature.variance,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4I().pack(_x.statusword, _x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs))
      _x = self.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w))
      buff.write(self.imu.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z))
      buff.write(self.imu.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z))
      buff.write(self.imu.linear_acceleration_covariance.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.wrench.header.seq, _x.wrench.header.stamp.secs, _x.wrench.header.stamp.nsecs))
      _x = self.wrench.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d3I().pack(_x.wrench.wrench.force.x, _x.wrench.wrench.force.y, _x.wrench.wrench.force.z, _x.wrench.wrench.torque.x, _x.wrench.wrench.torque.y, _x.wrench.wrench.torque.z, _x.externalImu.header.seq, _x.externalImu.header.stamp.secs, _x.externalImu.header.stamp.nsecs))
      _x = self.externalImu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.externalImu.orientation.x, _x.externalImu.orientation.y, _x.externalImu.orientation.z, _x.externalImu.orientation.w))
      buff.write(self.externalImu.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.externalImu.angular_velocity.x, _x.externalImu.angular_velocity.y, _x.externalImu.angular_velocity.z))
      buff.write(self.externalImu.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.externalImu.linear_acceleration.x, _x.externalImu.linear_acceleration.y, _x.externalImu.linear_acceleration.z))
      buff.write(self.externalImu.linear_acceleration_covariance.tostring())
      _x = self
      buff.write(_get_struct_B3I().pack(_x.isForceTorqueSaturated, _x.temperature.header.seq, _x.temperature.header.stamp.secs, _x.temperature.header.stamp.nsecs))
      _x = self.temperature.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.temperature.temperature, _x.temperature.variance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.WrenchStamped()
      if self.externalImu is None:
        self.externalImu = sensor_msgs.msg.Imu()
      if self.temperature is None:
        self.temperature = sensor_msgs.msg.Temperature()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.statusword, _x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs,) = _get_struct_4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 12
      (_x.wrench.header.seq, _x.wrench.header.stamp.secs, _x.wrench.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.wrench.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.wrench.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 60
      (_x.wrench.wrench.force.x, _x.wrench.wrench.force.y, _x.wrench.wrench.force.z, _x.wrench.wrench.torque.x, _x.wrench.wrench.torque.y, _x.wrench.wrench.torque.z, _x.externalImu.header.seq, _x.externalImu.header.stamp.secs, _x.externalImu.header.stamp.nsecs,) = _get_struct_6d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.externalImu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.externalImu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.externalImu.orientation.x, _x.externalImu.orientation.y, _x.externalImu.orientation.z, _x.externalImu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.externalImu.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.externalImu.angular_velocity.x, _x.externalImu.angular_velocity.y, _x.externalImu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.externalImu.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.externalImu.linear_acceleration.x, _x.externalImu.linear_acceleration.y, _x.externalImu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.externalImu.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 13
      (_x.isForceTorqueSaturated, _x.temperature.header.seq, _x.temperature.header.stamp.secs, _x.temperature.header.stamp.nsecs,) = _get_struct_B3I().unpack(str[start:end])
      self.isForceTorqueSaturated = bool(self.isForceTorqueSaturated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.temperature.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.temperature.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.temperature.temperature, _x.temperature.variance,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4I = None
def _get_struct_4I():
    global _struct_4I
    if _struct_4I is None:
        _struct_4I = struct.Struct("<4I")
    return _struct_4I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6d3I = None
def _get_struct_6d3I():
    global _struct_6d3I
    if _struct_6d3I is None:
        _struct_6d3I = struct.Struct("<6d3I")
    return _struct_6d3I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
