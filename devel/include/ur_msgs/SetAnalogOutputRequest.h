// Generated by gencpp from file ur_msgs/SetAnalogOutputRequest.msg
// DO NOT EDIT!


#ifndef UR_MSGS_MESSAGE_SETANALOGOUTPUTREQUEST_H
#define UR_MSGS_MESSAGE_SETANALOGOUTPUTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ur_msgs/Analog.h>

namespace ur_msgs
{
template <class ContainerAllocator>
struct SetAnalogOutputRequest_
{
  typedef SetAnalogOutputRequest_<ContainerAllocator> Type;

  SetAnalogOutputRequest_()
    : data()  {
    }
  SetAnalogOutputRequest_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ur_msgs::Analog_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetAnalogOutputRequest_

typedef ::ur_msgs::SetAnalogOutputRequest_<std::allocator<void> > SetAnalogOutputRequest;

typedef boost::shared_ptr< ::ur_msgs::SetAnalogOutputRequest > SetAnalogOutputRequestPtr;
typedef boost::shared_ptr< ::ur_msgs::SetAnalogOutputRequest const> SetAnalogOutputRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator1> & lhs, const ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator1> & lhs, const ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ab594f795bd6245c7dfa69b09b68bca";
  }

  static const char* value(const ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ab594f795bd6245ULL;
  static const uint64_t static_value2 = 0xc7dfa69b09b68bcaULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_msgs/SetAnalogOutputRequest";
  }

  static const char* value(const ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Analog data\n"
"\n"
"================================================================================\n"
"MSG: ur_msgs/Analog\n"
"uint8 CURRENT=0\n"
"uint8 VOLTAGE=1\n"
"\n"
"uint8 pin\n"
"uint8 domain # can be VOLTAGE or CURRENT\n"
"float32 state\n"
;
  }

  static const char* value(const ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetAnalogOutputRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_msgs::SetAnalogOutputRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "data: ";
    Printer< ::ur_msgs::Analog_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_MSGS_MESSAGE_SETANALOGOUTPUTREQUEST_H
