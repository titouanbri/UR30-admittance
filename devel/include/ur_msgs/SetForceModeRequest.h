// Generated by gencpp from file ur_msgs/SetForceModeRequest.msg
// DO NOT EDIT!


#ifndef UR_MSGS_MESSAGE_SETFORCEMODEREQUEST_H
#define UR_MSGS_MESSAGE_SETFORCEMODEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Twist.h>

namespace ur_msgs
{
template <class ContainerAllocator>
struct SetForceModeRequest_
{
  typedef SetForceModeRequest_<ContainerAllocator> Type;

  SetForceModeRequest_()
    : task_frame()
    , selection_vector_x(false)
    , selection_vector_y(false)
    , selection_vector_z(false)
    , selection_vector_rx(false)
    , selection_vector_ry(false)
    , selection_vector_rz(false)
    , wrench()
    , type(0)
    , speed_limits()
    , deviation_limits()
    , damping_factor(0.0)
    , gain_scaling(0.0)  {
      deviation_limits.assign(0.0);
  }
  SetForceModeRequest_(const ContainerAllocator& _alloc)
    : task_frame(_alloc)
    , selection_vector_x(false)
    , selection_vector_y(false)
    , selection_vector_z(false)
    , selection_vector_rx(false)
    , selection_vector_ry(false)
    , selection_vector_rz(false)
    , wrench(_alloc)
    , type(0)
    , speed_limits(_alloc)
    , deviation_limits()
    , damping_factor(0.0)
    , gain_scaling(0.0)  {
  (void)_alloc;
      deviation_limits.assign(0.0);
  }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _task_frame_type;
  _task_frame_type task_frame;

   typedef uint8_t _selection_vector_x_type;
  _selection_vector_x_type selection_vector_x;

   typedef uint8_t _selection_vector_y_type;
  _selection_vector_y_type selection_vector_y;

   typedef uint8_t _selection_vector_z_type;
  _selection_vector_z_type selection_vector_z;

   typedef uint8_t _selection_vector_rx_type;
  _selection_vector_rx_type selection_vector_rx;

   typedef uint8_t _selection_vector_ry_type;
  _selection_vector_ry_type selection_vector_ry;

   typedef uint8_t _selection_vector_rz_type;
  _selection_vector_rz_type selection_vector_rz;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
  _wrench_type wrench;

   typedef uint8_t _type_type;
  _type_type type;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _speed_limits_type;
  _speed_limits_type speed_limits;

   typedef boost::array<float, 6>  _deviation_limits_type;
  _deviation_limits_type deviation_limits;

   typedef float _damping_factor_type;
  _damping_factor_type damping_factor;

   typedef float _gain_scaling_type;
  _gain_scaling_type gain_scaling;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TCP_TO_ORIGIN)
  #undef TCP_TO_ORIGIN
#endif
#if defined(_WIN32) && defined(NO_TRANSFORM)
  #undef NO_TRANSFORM
#endif
#if defined(_WIN32) && defined(TCP_VELOCITY_TO_X_Y)
  #undef TCP_VELOCITY_TO_X_Y
#endif

  enum {
    TCP_TO_ORIGIN = 1u,
    NO_TRANSFORM = 2u,
    TCP_VELOCITY_TO_X_Y = 3u,
  };


  typedef boost::shared_ptr< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetForceModeRequest_

typedef ::ur_msgs::SetForceModeRequest_<std::allocator<void> > SetForceModeRequest;

typedef boost::shared_ptr< ::ur_msgs::SetForceModeRequest > SetForceModeRequestPtr;
typedef boost::shared_ptr< ::ur_msgs::SetForceModeRequest const> SetForceModeRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ur_msgs::SetForceModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ur_msgs::SetForceModeRequest_<ContainerAllocator1> & lhs, const ::ur_msgs::SetForceModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.task_frame == rhs.task_frame &&
    lhs.selection_vector_x == rhs.selection_vector_x &&
    lhs.selection_vector_y == rhs.selection_vector_y &&
    lhs.selection_vector_z == rhs.selection_vector_z &&
    lhs.selection_vector_rx == rhs.selection_vector_rx &&
    lhs.selection_vector_ry == rhs.selection_vector_ry &&
    lhs.selection_vector_rz == rhs.selection_vector_rz &&
    lhs.wrench == rhs.wrench &&
    lhs.type == rhs.type &&
    lhs.speed_limits == rhs.speed_limits &&
    lhs.deviation_limits == rhs.deviation_limits &&
    lhs.damping_factor == rhs.damping_factor &&
    lhs.gain_scaling == rhs.gain_scaling;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ur_msgs::SetForceModeRequest_<ContainerAllocator1> & lhs, const ::ur_msgs::SetForceModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ur_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04cfdc672416a6eb3ccbbcc81eeaa8a5";
  }

  static const char* value(const ::ur_msgs::SetForceModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04cfdc672416a6ebULL;
  static const uint64_t static_value2 = 0x3ccbbcc81eeaa8a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ur_msgs/SetForceModeRequest";
  }

  static const char* value(const ::ur_msgs::SetForceModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A 6d pose vector that defines the force frame relative to the base frame\n"
"geometry_msgs/PoseStamped task_frame        \n"
"\n"
"# A 6d vector of 0s and 1s. 1 means that the robot will be compliant in the corresponding axis of the task frame\n"
"bool selection_vector_x\n"
"bool selection_vector_y\n"
"bool selection_vector_z\n"
"bool selection_vector_rx\n"
"bool selection_vector_ry\n"
"bool selection_vector_rz  \n"
"\n"
"# The forces/torques the robot will apply to its environment. For geometric interpretation, please\n"
"# see parameter `type`\n"
"geometry_msgs/Wrench wrench\n"
"\n"
"# An integer [1;3] specifying how the robot interprets the force frame\n"
"# 1: The force frame is transformed in a way such that its y-axis is aligned with a vector pointing\n"
"#    from the robot tcp towards the origin of the force frame.\n"
"# 2: The force frame is not transformed.\n"
"# 3: The force frame is transformed in a way such that its x-axis is the projection of the robot tcp\n"
"#     velocity vector onto the x-y plane of the force frame.\n"
"uint8 type\n"
"# Type constants:\n"
"uint8 TCP_TO_ORIGIN=1\n"
"uint8 NO_TRANSFORM=2\n"
"uint8 TCP_VELOCITY_TO_X_Y=3\n"
"\n"
"# Maximum allowed tcp speed (relative to the task frame).\n"
"# PLEASE NOTE: This is only relevant for axes marked as compliant in the selection_vector\n"
"geometry_msgs/Twist speed_limits\n"
"\n"
"# For non-compliant axes, these values are the maximum allowed deviation along/about an axis\n"
"# between the actual tcp position and the one set by the program.\n"
"float32[6] deviation_limits\n"
"\n"
"# Force mode damping factor. Sets the damping parameter in force mode. In range [0;1], default value is 0.025\n"
"# A value of 1 is full damping, so the robot will decelerate quickly if no force is present. A value of 0\n"
"# is no damping, here the robot will maintain the speed.\n"
"float32 damping_factor\n"
"\n"
"# Force mode gain scaling factor. Scales the gain in force mode. scaling parameter is in range [0;2], default is 0.5. \n"
"# A value larger than 1 can make force mode unstable, e.g. in case of collisions or pushing against hard surfaces.\n"
"float32 gain_scaling\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3 linear\n"
"Vector3 angular\n"
;
  }

  static const char* value(const ::ur_msgs::SetForceModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_frame);
      stream.next(m.selection_vector_x);
      stream.next(m.selection_vector_y);
      stream.next(m.selection_vector_z);
      stream.next(m.selection_vector_rx);
      stream.next(m.selection_vector_ry);
      stream.next(m.selection_vector_rz);
      stream.next(m.wrench);
      stream.next(m.type);
      stream.next(m.speed_limits);
      stream.next(m.deviation_limits);
      stream.next(m.damping_factor);
      stream.next(m.gain_scaling);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetForceModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ur_msgs::SetForceModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ur_msgs::SetForceModeRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "task_frame: ";
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.task_frame);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "selection_vector_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.selection_vector_x);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "selection_vector_y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.selection_vector_y);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "selection_vector_z: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.selection_vector_z);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "selection_vector_rx: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.selection_vector_rx);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "selection_vector_ry: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.selection_vector_ry);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "selection_vector_rz: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.selection_vector_rz);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "wrench: ";
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "speed_limits: ";
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.speed_limits);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "deviation_limits: ";
    if (v.deviation_limits.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.deviation_limits.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.deviation_limits[i]);
    }
    if (v.deviation_limits.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "damping_factor: ";
    Printer<float>::stream(s, indent + "  ", v.damping_factor);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gain_scaling: ";
    Printer<float>::stream(s, indent + "  ", v.gain_scaling);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UR_MSGS_MESSAGE_SETFORCEMODEREQUEST_H
