// Generated by gencpp from file rokubimini_msgs/FirmwareUpdateEthercatRequest.msg
// DO NOT EDIT!


#ifndef ROKUBIMINI_MSGS_MESSAGE_FIRMWAREUPDATEETHERCATREQUEST_H
#define ROKUBIMINI_MSGS_MESSAGE_FIRMWAREUPDATEETHERCATREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rokubimini_msgs
{
template <class ContainerAllocator>
struct FirmwareUpdateEthercatRequest_
{
  typedef FirmwareUpdateEthercatRequest_<ContainerAllocator> Type;

  FirmwareUpdateEthercatRequest_()
    : file_name()
    , file_path()
    , password(0)  {
    }
  FirmwareUpdateEthercatRequest_(const ContainerAllocator& _alloc)
    : file_name(_alloc)
    , file_path(_alloc)
    , password(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _file_name_type;
  _file_name_type file_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _file_path_type;
  _file_path_type file_path;

   typedef uint32_t _password_type;
  _password_type password;





  typedef boost::shared_ptr< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FirmwareUpdateEthercatRequest_

typedef ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<std::allocator<void> > FirmwareUpdateEthercatRequest;

typedef boost::shared_ptr< ::rokubimini_msgs::FirmwareUpdateEthercatRequest > FirmwareUpdateEthercatRequestPtr;
typedef boost::shared_ptr< ::rokubimini_msgs::FirmwareUpdateEthercatRequest const> FirmwareUpdateEthercatRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator1> & lhs, const ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator2> & rhs)
{
  return lhs.file_name == rhs.file_name &&
    lhs.file_path == rhs.file_path &&
    lhs.password == rhs.password;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator1> & lhs, const ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokubimini_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4057152a8f9029e0d6a6de4a64158492";
  }

  static const char* value(const ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4057152a8f9029e0ULL;
  static const uint64_t static_value2 = 0xd6a6de4a64158492ULL;
};

template<class ContainerAllocator>
struct DataType< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokubimini_msgs/FirmwareUpdateEthercatRequest";
  }

  static const char* value(const ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string file_name\n"
"string file_path\n"
"uint32 password\n"
;
  }

  static const char* value(const ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.file_name);
      stream.next(m.file_path);
      stream.next(m.password);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FirmwareUpdateEthercatRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokubimini_msgs::FirmwareUpdateEthercatRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "file_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.file_name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "file_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.file_path);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "password: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.password);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKUBIMINI_MSGS_MESSAGE_FIRMWAREUPDATEETHERCATREQUEST_H
