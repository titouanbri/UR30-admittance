// Generated by gencpp from file rokubimini_msgs/ResetWrenchRequest.msg
// DO NOT EDIT!


#ifndef ROKUBIMINI_MSGS_MESSAGE_RESETWRENCHREQUEST_H
#define ROKUBIMINI_MSGS_MESSAGE_RESETWRENCHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Wrench.h>

namespace rokubimini_msgs
{
template <class ContainerAllocator>
struct ResetWrenchRequest_
{
  typedef ResetWrenchRequest_<ContainerAllocator> Type;

  ResetWrenchRequest_()
    : desired_wrench()  {
    }
  ResetWrenchRequest_(const ContainerAllocator& _alloc)
    : desired_wrench(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _desired_wrench_type;
  _desired_wrench_type desired_wrench;





  typedef boost::shared_ptr< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ResetWrenchRequest_

typedef ::rokubimini_msgs::ResetWrenchRequest_<std::allocator<void> > ResetWrenchRequest;

typedef boost::shared_ptr< ::rokubimini_msgs::ResetWrenchRequest > ResetWrenchRequestPtr;
typedef boost::shared_ptr< ::rokubimini_msgs::ResetWrenchRequest const> ResetWrenchRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator1> & lhs, const ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator2> & rhs)
{
  return lhs.desired_wrench == rhs.desired_wrench;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator1> & lhs, const ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokubimini_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c17e2a03e9bfbf4880fb44b7cbb9269b";
  }

  static const char* value(const ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc17e2a03e9bfbf48ULL;
  static const uint64_t static_value2 = 0x80fb44b7cbb9269bULL;
};

template<class ContainerAllocator>
struct DataType< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokubimini_msgs/ResetWrenchRequest";
  }

  static const char* value(const ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Wrench desired_wrench\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desired_wrench);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetWrenchRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokubimini_msgs::ResetWrenchRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "desired_wrench: ";
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.desired_wrench);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKUBIMINI_MSGS_MESSAGE_RESETWRENCHREQUEST_H
