// Generated by gencpp from file rokubimini_msgs/Reading.msg
// DO NOT EDIT!


#ifndef ROKUBIMINI_MSGS_MESSAGE_READING_H
#define ROKUBIMINI_MSGS_MESSAGE_READING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/Imu.h>
#include <geometry_msgs/WrenchStamped.h>
#include <sensor_msgs/Imu.h>
#include <sensor_msgs/Temperature.h>

namespace rokubimini_msgs
{
template <class ContainerAllocator>
struct Reading_
{
  typedef Reading_<ContainerAllocator> Type;

  Reading_()
    : header()
    , statusword(0)
    , imu()
    , wrench()
    , externalImu()
    , isForceTorqueSaturated(false)
    , temperature()  {
    }
  Reading_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , statusword(0)
    , imu(_alloc)
    , wrench(_alloc)
    , externalImu(_alloc)
    , isForceTorqueSaturated(false)
    , temperature(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _statusword_type;
  _statusword_type statusword;

   typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _imu_type;
  _imu_type imu;

   typedef  ::geometry_msgs::WrenchStamped_<ContainerAllocator>  _wrench_type;
  _wrench_type wrench;

   typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _externalImu_type;
  _externalImu_type externalImu;

   typedef uint8_t _isForceTorqueSaturated_type;
  _isForceTorqueSaturated_type isForceTorqueSaturated;

   typedef  ::sensor_msgs::Temperature_<ContainerAllocator>  _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::rokubimini_msgs::Reading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokubimini_msgs::Reading_<ContainerAllocator> const> ConstPtr;

}; // struct Reading_

typedef ::rokubimini_msgs::Reading_<std::allocator<void> > Reading;

typedef boost::shared_ptr< ::rokubimini_msgs::Reading > ReadingPtr;
typedef boost::shared_ptr< ::rokubimini_msgs::Reading const> ReadingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokubimini_msgs::Reading_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokubimini_msgs::Reading_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokubimini_msgs::Reading_<ContainerAllocator1> & lhs, const ::rokubimini_msgs::Reading_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.statusword == rhs.statusword &&
    lhs.imu == rhs.imu &&
    lhs.wrench == rhs.wrench &&
    lhs.externalImu == rhs.externalImu &&
    lhs.isForceTorqueSaturated == rhs.isForceTorqueSaturated &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokubimini_msgs::Reading_<ContainerAllocator1> & lhs, const ::rokubimini_msgs::Reading_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokubimini_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rokubimini_msgs::Reading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokubimini_msgs::Reading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokubimini_msgs::Reading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokubimini_msgs::Reading_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokubimini_msgs::Reading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokubimini_msgs::Reading_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokubimini_msgs::Reading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f632d7286fac45ac13e8083c2bf7f237";
  }

  static const char* value(const ::rokubimini_msgs::Reading_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf632d7286fac45acULL;
  static const uint64_t static_value2 = 0x13e8083c2bf7f237ULL;
};

template<class ContainerAllocator>
struct DataType< ::rokubimini_msgs::Reading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokubimini_msgs/Reading";
  }

  static const char* value(const ::rokubimini_msgs::Reading_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokubimini_msgs::Reading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Reading\n"
"\n"
"# Message header.\n"
"Header header\n"
"# Statusword.\n"
"uint32 statusword\n"
"sensor_msgs/Imu imu\n"
"geometry_msgs/WrenchStamped wrench\n"
"sensor_msgs/Imu externalImu\n"
"bool isForceTorqueSaturated\n"
"sensor_msgs/Temperature temperature\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Imu\n"
"# This is a message to hold data from an IMU (Inertial Measurement Unit)\n"
"#\n"
"# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n"
"#\n"
"# If the covariance of the measurement is known, it should be filled in (if all you know is the \n"
"# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n"
"# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n"
"# data a covariance will have to be assumed or gotten from some other source\n"
"#\n"
"# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n"
"# estimate), please set element 0 of the associated covariance matrix to -1\n"
"# If you are interpreting this message, please check for a value of -1 in the first element of each \n"
"# covariance matrix, and disregard the associated estimate.\n"
"\n"
"Header header\n"
"\n"
"geometry_msgs/Quaternion orientation\n"
"float64[9] orientation_covariance # Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 angular_velocity\n"
"float64[9] angular_velocity_covariance # Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"float64[9] linear_acceleration_covariance # Row major x, y z \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/WrenchStamped\n"
"# A wrench with reference coordinate frame and timestamp\n"
"Header header\n"
"Wrench wrench\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Temperature\n"
"# Single temperature reading.\n"
"\n"
"Header header           # timestamp is the time the temperature was measured\n"
"                         # frame_id is the location of the temperature reading\n"
"\n"
"float64 temperature     # Measurement of the Temperature in Degrees Celsius\n"
"\n"
"float64 variance        # 0 is interpreted as variance unknown\n"
;
  }

  static const char* value(const ::rokubimini_msgs::Reading_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokubimini_msgs::Reading_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.statusword);
      stream.next(m.imu);
      stream.next(m.wrench);
      stream.next(m.externalImu);
      stream.next(m.isForceTorqueSaturated);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Reading_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokubimini_msgs::Reading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokubimini_msgs::Reading_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "statusword: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.statusword);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "imu: ";
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.imu);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "wrench: ";
    Printer< ::geometry_msgs::WrenchStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "externalImu: ";
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.externalImu);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "isForceTorqueSaturated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isForceTorqueSaturated);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "temperature: ";
    Printer< ::sensor_msgs::Temperature_<ContainerAllocator> >::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKUBIMINI_MSGS_MESSAGE_READING_H
